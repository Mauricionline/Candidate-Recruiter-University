// <auto-generated />
using System;
using Candidate_Recruiter.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Candidate_Recruiter.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240327081230_seedCandidatos")]
    partial class seedCandidatos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Candidate_Recruiter.Models.Candidato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AspiracionSalarialMinima")
                        .HasColumnType("float");

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Candidato");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54a618cc-a19e-47a4-b6b2-19015df3a962"),
                            AspiracionSalarialMinima = 2000.0,
                            Cedula = "123456789",
                            Correo = "maria.garcia@example.com",
                            Nombre = "María García"
                        },
                        new
                        {
                            Id = new Guid("5ca974cd-b13e-4be3-a1f0-e95fb0bf564a"),
                            AspiracionSalarialMinima = 1800.0,
                            Cedula = "987654321",
                            Correo = "cfernandez@example.com",
                            Nombre = "Carlos Fernández"
                        },
                        new
                        {
                            Id = new Guid("5b00714a-3d47-4ebf-8e38-dce3980ce884"),
                            AspiracionSalarialMinima = 2200.0,
                            Cedula = "456789123",
                            Correo = "anarod@example.com",
                            Nombre = "Ana Rodríguez"
                        },
                        new
                        {
                            Id = new Guid("ee72df04-e42d-49cd-b787-35a081798a7e"),
                            AspiracionSalarialMinima = 1900.0,
                            Cedula = "654321987",
                            Correo = "juan.lopez@example.com",
                            Nombre = "Juan López"
                        },
                        new
                        {
                            Id = new Guid("3781e0ea-f9ab-47a4-892d-29ca9bb14703"),
                            AspiracionSalarialMinima = 2100.0,
                            Cedula = "789123456",
                            Correo = "laura.martinez@example.com",
                            Nombre = "Laura Martínez"
                        },
                        new
                        {
                            Id = new Guid("7cb1e326-4a81-41ea-8e09-ba0b68debc55"),
                            AspiracionSalarialMinima = 1950.0,
                            Cedula = "321654987",
                            Correo = "pdiaz@example.com",
                            Nombre = "Pedro Díaz"
                        },
                        new
                        {
                            Id = new Guid("0e6c1fac-8a16-4a66-b73a-cec784f960bd"),
                            AspiracionSalarialMinima = 2050.0,
                            Cedula = "135792468",
                            Correo = "slo@example.com",
                            Nombre = "Sofía López"
                        },
                        new
                        {
                            Id = new Guid("3d82ea8a-514e-4211-9b84-deb39b856a99"),
                            AspiracionSalarialMinima = 1980.0,
                            Cedula = "246813579",
                            Correo = "mgonzalez@example.com",
                            Nombre = "Miguel González"
                        },
                        new
                        {
                            Id = new Guid("2300da76-fab5-4e09-9340-010c72290a6c"),
                            AspiracionSalarialMinima = 2250.0,
                            Cedula = "9876543210",
                            Correo = "elenas@example.com",
                            Nombre = "Elena Sánchez"
                        },
                        new
                        {
                            Id = new Guid("07b4b871-36a1-4074-ab92-dac946cce88f"),
                            AspiracionSalarialMinima = 1800.0,
                            Cedula = "123098765",
                            Correo = "david.perez@example.com",
                            Nombre = "David Pérez"
                        });
                });

            modelBuilder.Entity("Candidate_Recruiter.Models.Puesto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salario")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Puesto");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f38425cc-8499-4e75-8e8f-03519ef063f2"),
                            Codigo = "1",
                            Nombre = "Backend C# Developer",
                            Salario = 5000.0,
                            Status = "Vacante"
                        },
                        new
                        {
                            Id = new Guid("86c88cc5-1971-43b6-ad01-b0c21dbbeae2"),
                            Codigo = "2",
                            Nombre = "Frontend Developer",
                            Salario = 4800.0,
                            Status = "Vacante"
                        },
                        new
                        {
                            Id = new Guid("b706c933-ee44-4d00-af7c-b74349ecb791"),
                            Codigo = "3",
                            Nombre = "Software Engineer",
                            Salario = 5500.0,
                            Status = "Vacante"
                        },
                        new
                        {
                            Id = new Guid("7eb34709-f623-425e-ad5a-6c92149b7f91"),
                            Codigo = "4",
                            Nombre = "Data Scientist",
                            Salario = 6000.0,
                            Status = "Vacante"
                        },
                        new
                        {
                            Id = new Guid("3515bbf1-fd21-4320-a2a4-eebaafe46b4e"),
                            Codigo = "5",
                            Nombre = "DevOps Engineer",
                            Salario = 5800.0,
                            Status = "Vacante"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
